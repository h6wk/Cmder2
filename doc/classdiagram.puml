@startuml





/' Objects '/

class scoped_logger {
	+scoped_logger(const std::string& className, const char* funcName, unsigned line)
	+~scoped_logger()
	-_ss : std::stringstream
	+stream() : std::stringstream&
}


namespace cmder {
	namespace tst {
		class TaskTest {
			#SetUp() : void
			#{static} SetUpTestSuite() : void
			#TearDown() : void
			#{static} TearDownTestSuite() : void
		}

		class ThreadPoolTest {
			#mThreadPool : std::unique_ptr<ThreadPool>
			#SetUp() : void
			#{static} SetUpTestSuite() : void
			#TearDown() : void
			#{static} TearDownTestSuite() : void
		}
	}

	namespace tools {
		class ThreadPool {
			+ThreadPool(size_t threadCount)
			-function<void()
			+~ThreadPool()
			-mStopThreadPool : bool
			+result_of_t<F(Args ... )>>execute ( F&& f, Args&& ... args) : requires std::invocable<F , Args ...>
			-mConditionVariable : std::condition_variable
			-mMutex : std::mutex
			-mThreads : std::vector<std::thread>
		}
	}

	namespace agent {
		class Task {
			-mTaskConfiguration : std::vector<TaskConfig>
		}

		enum TaskName {
			BlockMe_3s
			Pi
			PingMe_5x
		}

		class Task::TaskConfig {
		}
	}
}





/' Inheritance relationships '/




/' Aggregation relationships '/

cmder.tst.ThreadPoolTest *-- cmder.tools.ThreadPool






/' Nested objects '/

cmder.agent.Task +-- cmder.agent.Task::TaskConfig




@enduml
